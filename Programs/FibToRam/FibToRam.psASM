 # Calculates all Fibonacci numbers that fit into 8 bits and stores them in RAM
@include "std_sys.psASM"

###### Definitions ##########
# Position were we will store the pointer to the latest number
@define adr_pointer 0xff

LITA 1 
SVA adr_pointer

# The first two numbers are given
LITA 1
LITB 1
SVA 0 
SVA 1

# Loop

# A: New Value  B: Prev Value
# Calculate the next number into A
loop: 
ADD 

# Check we did not overflow
IFSM SYS1, S1_C
JMP Display 

# Temporarily store the previous number on the stack
# and grab the address of the last number we stored in RAM
SWP
PUSHA
LDA adr_pointer 

# Increment the address and store the new value there
ADDLA 1
SWP
SVDR 

# Save the current address
SVB adr_pointer # stored new address

# Retrieve the previous number into A and keep the current number in B
# Loop again
SWP
POPA
JMP loop

Display:
LITA 0
LITB 0

Display_loop:
    LDDR # Retrieve Number and show in A
    HALT
    
    # Increase B every iteration, up to a max of adr_pointer
    ADDLB 1
    LDA adr_pointer 
    IFSM SYS3, S3_AlessB
        LITB 0

JMP Display_loop

