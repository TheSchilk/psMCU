#
# Snake.psASM
#
# A simple snake game for an 8x8 LED Matrix
#

@include "std_sys.psASM"

@include "Setup.psASM"
@include "Render.psASM"
@include "UpdateBoard.psASM"
@include "UpdateGamestate.psASM"

# Entry point
MAIN:
    CALL GAME_OVER
    JMP GAME


# Game Start:
GAME:
    CALL SETUP
    JMP MAIN_LOOP

    # Game Loop:
    MAIN_LOOP: 
        CALL UPDATE_GAMESTATE
        
        # Check game over
        IFRM SYS3,S3_A0
            JMP GAME_OVER
       
        CALL UPDATE_BOARD
        CALL RENDER
        
        # DELAY
        CALL DELAY_DELAY

        JMP MAIN_LOOP

GAME_OVER: 
    CALL UGS_RESET_INPUT_TRACKING
    CALL RENDER_GAME_OVER
    IFSM 0x105, 3 # If Enter is pressed
        JMP GAME
    JMP GAME_OVER


# #############

@define DD_DELAY 200
@define DD_DELAY_SYS2_TRHS 0x80
@define DD_DELAY_TRACK_INPUT 75
DELAY_DELAY:
    PUSHA
    PUSHB
    
    # Decide delay loop count:
    # If SYS2 is less than a set threshold (meaning clock is relatively
    # slow) we only check the inputs once and return. Otherwise we do
    # the full delay loop.
    LDA SYS2 
    LITB DD_DELAY_SYS2_TRHS

    IFRM SYS3, S3_AlessB # If clock is fast enough
        JMP delay_delay_loop
    
    # Clock is slow, don't delay:
    CALL UGS_TRACK_INPUTS
    JMP delay_delay_done

    delay_delay_loop:
        # Keep track of any inputs pressed while waiting, but only after
        # A certain amount of delay has passed
        PUSHB
        LITB DD_DELAY_TRACK_INPUT
        IFSM SYS3,S3_AlessB
            CALL UGS_TRACK_INPUTS
        POPB 

        # Call short delay func
        CALL DELAY
        
        # Keep track of loop count
        ADDLA -1
        IFSM SYS3,S3_A0
            JMP delay_delay_done
        JMP delay_delay_loop
    
    delay_delay_done:

    POPA
    POPA
    RTRN

@define D_DELAY 255
DELAY:
    PUSHA
    LITA D_DELAY
    delay_loop: 
        SUBL 1
        IFSM SYS3,S3_A0
            JMP delay_done
        JMP delay_loop
    delay_done:
    POPA
    RTRN

