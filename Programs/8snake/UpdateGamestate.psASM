#
# UpdateGamestate.psASM
#
# Update the current game state
#

@define GS_length     0x40
@define GS_headpos    0x41 
@define GS_applepos   0x42
@define GS_dir        0x43
@define GS_board_dec  0x44 

@define GS_headpos_x  0x50
@define GS_headpos_y  0x51
@define GS_inputs_acc 0x52

@define INPUT        0x104
@define INP_L        4
@define INP_R        6

@define GS_apple_pos_increase 35

UPDATE_GAMESTATE:
    # 
    # Update the current gamestate.
    # Returns with A=1 if the game is over, A=0 else
    #

    # ==== Update direction based on input: =====
    # Check if left is pressed: 
    IFRM GS_inputs_acc,INP_L
        JMP UGS_LEFT_DONE 
    
    # Left pressed.
    LDA GS_dir
    SUBL 1
    ANDL 0b11
    SVA GS_dir

    UGS_LEFT_DONE:


    # Check if right is pressed:
    IFRM GS_inputs_acc,INP_R
        JMP UGS_RIGHT_DONE

    # Right pressed.
    LDA GS_dir
    ADDLA 1
    ANDL 0b11
    SVA GS_dir

    UGS_RIGHT_DONE:

    # === Update headpos based on direction: ====
    # switch(GS_pos) (0 = UP, 1 = RIGHT, 2 = DOWN, 3 = LEFT)
    LDA GS_dir
    LITB 0
    IFSM SYS3, S3_AB
        JMP UGS_DIR_UP
    LITB 1
    IFSM SYS3, S3_AB
        JMP UGS_DIR_RIGHT
    LITB 2
    IFSM SYS3, S3_AB
        JMP UGS_DIR_DOWN
    JMP UGS_DIR_LEFT

    UGS_DIR_UP:
        # Next head position
        LDA GS_headpos_y
        SUBL 1
        SVA GS_headpos_y

        # If we did not underflow, we are good to continue: 
        IFRA 7 
            JMP UGS_DIR_DONE
        
        # If we did underflow, we collided against a wall. The game is over
        LITA 1
        RTRN # Return with A = 1

    UGS_DIR_RIGHT:
        # Check if this would cause a wall collision
        LDA GS_headpos_x
        SUBL 1
        SVA GS_headpos_x
        
        # If we did not underflow, we are good to continue: 
        IFRA 7 
            JMP UGS_DIR_DONE
        
        # If we did underflow, we collided against a wall. The game is over
        LITA 1
        RTRN # Return with A = 1

    UGS_DIR_DOWN:
        # Next head position
        LDA GS_headpos_y
        ADDLA 1
        SVA GS_headpos_y

        # Check that we did collide:
        LITB 8
        IFSM SYS3,S3_AlessB
            JMP UGS_DIR_DONE

        # We collided:
        LITA 1
        RTRN # Return with A = 1

    UGS_DIR_LEFT:
        # Next head position
        LDA GS_headpos_x
        ADDLA 1
        SVA GS_headpos_x

        # Check that we did collide:
        LITB 8
        IFSM SYS3,S3_AlessB
            JMP UGS_DIR_DONE

        # We collided:
        LITA 1
        RTRN # Return with A = 1

    UGS_DIR_DONE:
    
    # Reset Input tracking
    CALL UGS_RESET_INPUT_TRACKING

    # Calculte GS_headpos based on x and y:
    # GS_headpos = (GS_headpos_y * 8) + GS_headpos_x
    LDA GS_headpos_y
    SHFTLL 3 # times 8
    LDB GS_headpos_x
    ADD
    SVA GS_headpos

    #### Make sure we did not collide with snake body: ####
    
    # Load board mem at location GS_headpos into A:
    LDB GS_headpos
    LDDR

    # If the board is 0 there, we definetly did not collide:
    IFSM SYS3, S3_A0
        JMP UGS_NO_BODY_COLLISION

    # If this is the apple position, we also did not collide:
    LDA GS_applepos
    IFSM SYS3, S3_AB
       JMP UGS_NO_BODY_COLLISION
    
    # Because the board is not 0, and this is not the the apple position,
    # We collided with ourselfs.
    LITA 1 
    RTRN # Return with A = 1

    UGS_NO_BODY_COLLISION:
    
    #### Check if we found an apple: ####
    LDA GS_applepos
    LDB GS_headpos

    IFRM SYS3,S3_AB
        JMP UGS_APPLE_DONE
    
    #### Apple found: ####

    # Don't decrease board mem on this iteration:
    LITA 0
    SVA GS_board_dec

    # Increase Length
    LDA GS_length
    ADDLA 1 
    SVA GS_length
    
    # End condition 
    LITB 62
    IFRM SYS3,S3_AB
        JMP UGS_NOT_TOO_LONG
    LITA 1
    RTRN # Return with A = 1 
    UGS_NOT_TOO_LONG:
    
    # Determine next apple position.
    # First, try GS_apple_pos+GS_apple_pos_increase
    LDA GS_applepos
    ADDLA GS_apple_pos_increase 
    ANDL 0x3F
    SWP

    
    # # Check if this spot is already taken. 
    # # If it is already take, increase by 1 and try again
    # GS_APPLE_KEEP_STEPPING:
    #     LDDR # Load board mem at apple position to A
    #     IFSM SYS3, S3_A0
    #         JMP UGS_APPLE_POSITION_FOUND # Position OK

    #     # Position not OK. keep iterating.
    #     SWP 
    #     ADDLA 1
    #     ANDL 0x3F
    #     SWP
    #     JMP GS_APPLE_KEEP_STEPPING
    
    UGS_APPLE_POSITION_FOUND:
    SVB GS_applepos

    UGS_APPLE_DONE:

    #### Done. Return Success. ####
    LITA 0
    RTRN # Return with A = 0


# Called repeatedly while delaying for next update
# Accumulates all inputs pressed during delay
UGS_TRACK_INPUTS:
    PUSHA
    PUSHB
    
    LDA GS_inputs_acc
    LDB INPUT
    
    OR

    SVA GS_inputs_acc

    POPB
    POPA
    RTRN

# Reset Input accumulation
UGS_RESET_INPUT_TRACKING:
    PUSHA
    LITA 0x00
    SVA GS_inputs_acc
    POPA
    RTRN

