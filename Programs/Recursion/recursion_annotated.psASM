
###################################
# File: recursion.psASM 
###################################

# #########################################################

# Calculate sum(n) = 1+2+...+n using the recursive method:
# sum(n):
#   if n == 0:
#       return 0
#   else:
#       return n + sum(n-1)

# #########################################################

@include "std_sys.psASM"

# MAIN: Calculate sum(10) (=55=0x37) and halt.
MAIN:

# Calculate sum(4) =10=0x0a and halt
LITA 4 # @ 0x0003: LITA 0x4
CALL SUM # @ 0x0004: CALL 0xd
HALT # @ 0x0005: HALT

# Calculate sum(10) =55=0x37 and halt
LITA 10 # @ 0x0006: LITA 0xa
CALL SUM # @ 0x0007: CALL 0xd
HALT # @ 0x0008: HALT

# Calculate sum(18) =171=0xAB and halt
LITA 18 # @ 0x0009: LITA 0x12
CALL SUM # @ 0x000a: CALL 0xd
HALT # @ 0x000b: HALT

# Jump back to main
JMP MAIN # @ 0x000c: JMP 0x3

# #########################################################

# sum(n)
# Takes in Argument stored in A, saves return value in A
SUM:
    # if A=0, return with A = 0
    IFSM SYS3,S3_A0 # @ 0x000d: IFSM 0x102, 0x2
        RTRN # @ 0x000e: RTRN

    # ELSE: A = n. Save n and call SUM with n-1
    PUSHA # Save A to the stack # @ 0x000f: PUSHA
    ADDLA -1 # Subtract 1 from n # @ 0x0010: ADDLA -0x1
    CALL SUM # Call SUM with n-1 # @ 0x0011: CALL 0xd

    # Now we have sum(n-1) in A 
    SWP # @ 0x0012: SWP
    POPA # @ 0x0013: POPA

    # Now we have n in A and sum(n-1) in B
    ADD # calculate sum(n-1)+n # @ 0x0014: ADD
    LITB 0 # @ 0x0015: LITB 0x0
    RTRN # @ 0x0016: RTRN


###################################
# File: std_startup.psASM 
###################################

# 
# psMCU Startup 
#

# Include guard
@ifndef SYSTEM_STARTUP_HEADER
    
    # This is the first time the startup file is included. 
    @define SYSTEM_STARTUP_HEADER

    # Entry point:
    # If 'MAIN' is defined jump to MAIN, otherwise jump to the first instruction beyond this line.
    JMP defined(MAIN) ? MAIN : _EOF # @ 0x0000: JMP 0x3

    # Interrupt Handler:
    # If the program defines an interrupt handler, use it. Otherwise fall back onto the fall-back 
    # handler defined below.
    JMP defined(INTERRUPT) ? INTERRUPT : _fallback_handler # @ 0x0001: JMP 0x2

    # Fallback interrupt handler:
    _fallback_handler: RTRNI # @ 0x0002: RTRNI
    
    # End-of-file:
    _EOF:

@else
    
    # This startup file was included more than once.
    @print "Error: std_startup.psASM was included more than once!"
    @print "The assembler automatically includes the startup file unless the -s flag is set."
    @print "Remove all manual includes of this file or set the -s flag."
    @error "Aborting."

@endif


###################################
# File: std_footer.psASM 
###################################

#
# psMCU Footer
#

# Catch accidental overrun:
_stop: HALT # @ 0x0017: HALT
JMP _stop # @ 0x0018: JMP 0x17

###################################
# File: std_sys.psASM 
###################################

#
# StdLib for psMCU.
# Contains Register addresses and bit indexes.
#

@include_once

# #######################################
# ########## System Registers ###########
# #######################################

# ############### SYS1 ##################
@define SYS1           0x100    # (R/W) System Register 1.

# Bits:
@define S1_SHFT_IN     0        # [0]    (R/W) Bit that is shifted in while shifting.
@define S1_C           1        # [1]    (R/W) ALU Carry in/out bit.
@define S1_HC          2        # [2]    (R/W) ALU Half-carry out bit.
@define S1_OVF         3        # [3]    (R/W) ALU Overflow flag.
@define S1_COMP_C      4        # [4]    (R/W) Complement carry in/out flag. 
                                # [5..7] (R) Reserved. Always Reads 0.

# Shifts and Masks:
@define S1_SHFT_IN_S   0        # SHFT_IN field shift.
@define S1_SHFT_IN_M   0x1      # SHFT_IN field mask.

@define S1_C_S         1        # C field shift.
@define S1_C_M         0x2      # C field mask.

@define S1_HC_S        2        # HC field shift.
@define S1_HC_M        0x4      # HC field mask.

@define S1_OVF_S       3        # OVF field shift.
@define S1_OVF_M       0x8      # OVF field mask.

@define S1_COMP_C_S    4        # COMP_C field shift.
@define S1_COMP_C_M    0x10     # COMP_C field mask.

# ############### SYS2 ##################
@define SYS2           0x101    # (R/W) System Register 2.

# Bits:
                                # [0..4] (R/W) RAM Page.
                                # [5..7] (R) Clock Frequency.

# Shifts and Masks:
@define S2_PAGE_S      0        # PAGE field shift.
@define S2_PAGE_M      0x1f     # PAGE field mask.

@define S2_FREQ_S      5        # FREQ field shift.
@define S2_FREQ_M      0xe0     # FREQ field shift.

# ############### SYS3 ##################
@define SYS3           0x102    # (R/W) System Register 3

# Bits:
@define S3_INT_EN      0        # [0]    (R/W) Interrupt Enable bit.
@define S3_INT_BTN_F   1        # [1]    (R/W) Button Interrupt flag.
@define S3_A0          2        # [2]    (R) Reads 1 if A==0. 0 Otherwise.
@define S3_B0          3        # [3]    (R) Reads 1 if B==0. 0 Otherwise.
@define S3_AB          4        # [4]    (R) Reads 1 if A==B. 0 Otherwise.
@define S3_AgreaterB   5        # [5]    (R) Reads 1 if A>B. 0 Otherwise.
@define S3_BlessA      5        # (Alias)
@define S3_BgreaterA   6        # [6]    (R) Reads 1 if A<B. 0 Otherwise.
@define S3_AlessB      6        # (Alias)
                                # [6..7] (R) Reserved. Always Reads 0.	

# Shifts and Masks:
@define S3_INT_EN_S    0        # INT_EN field shift.
@define S3_INT_EN_M    1        # INT_EN field mask.

@define S3_INT_BTN_F_S 1        # INT_BTN_F field shift.
@define S3_INT_BTN_F_M 0x2      # INT_BTN_F field mask.

###################################
# File: _header_footer_autogen.psASM 
###################################

#
# Root Header/Footer file
# (Automatically generated)
#


# Startup file
# Handles branch to entry point and interrupt.
@include "std_startup.psASM"

# Main Program
@include "recursion.psASM"

# Footer file
# Adds infinite loop to end of program to prevent overrun.
@include "std_footer.psASM"

